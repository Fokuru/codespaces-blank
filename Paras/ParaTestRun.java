//
//  Class author:  Raley
//  Date created:  11/11/2024
//  General description: Checks to see if a string of different parenthesis is valid. 
//
package Paras;

public class ParaTestRun {
    public static void main(String[] args) {
    /*
      Pre-condition: None - No user imput.
      Post-condition: Prints out whether the imputed text closes all parenthesis with a matching type.
    */
    System.out.println("Checking: ({[[([])]]})");
    ParaCheckRun.check("({[[([])]]})");
    System.out.println("Checking: ({[[({[}])]]})");
    ParaCheckRun.check("({[[({[}])]]})");
    System.out.println("Checking: ({[[([]())]]})");
    ParaCheckRun.check("({[[([]())]]})");
    System.out.println("Checking: ({[[([])]]}");
    ParaCheckRun.check("({[[([])]]}");
    System.out.println("Checking: ({[[([])]]})]");
    ParaCheckRun.check("({[[([])]]})]");
    System.out.println("Checking: ({[[([))]]})");
    ParaCheckRun.check("({[[([))]]})");
    System.out.println("Checking: {{[[(([([[{{([[[(({[[([])]]}))]]])}}]])]))]]}}");
    ParaCheckRun.check("{{[[(([([[{{([[[(({[[([])]]}))]]])}}]])]))]]}}");
    System.out.println("Checking: {{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}");
    ParaCheckRun.check("{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}");
    System.out.println("Checking: ({{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}");
    ParaCheckRun.check("({{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([{{[[(([([[{{([[[(({[[([])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}])]]}))]]])}}]])]))]]}}");
    }
}
